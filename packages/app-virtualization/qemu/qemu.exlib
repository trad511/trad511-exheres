# Copyright 2009-2012 Wulf C. Krueger <philantrop@exherbo.org>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'kvm-83.ebuild' from Gentoo, which is:
#     Copyright 1999-2009 Gentoo Foundation

require udev-rules

export_exlib_phases src_prepare src_configure src_install pkg_postinst

SUMMARY="Kernel-based Virtual Machine (kvm) userland tools (${PN})"
DESCRIPTION="
KVM (for Kernel-based Virtual Machine) is a full virtualization solution for Linux
on x86 hardware containing virtualization extensions (Intel VT or AMD-V). It
consists of a loadable kernel module, kvm.ko, that provides the core virtualization
infrastructure and a processor specific module, kvm-intel.ko or kvm-amd.ko. Using
KVM, one can run multiple virtual machines running unmodified Linux or Windows
images. Each virtual machine has private virtualized hardware: a network card,
disk, graphics adapter, etc. The kernel component of KVM is included in mainline
Linux, as of 2.6.20. Since it's using QEMU, kvm can be used without hardware support.
"
HOMEPAGE="http://www.qemu.org/"
DOWNLOADS="http://wiki.qemu-project.org/download/${PNV}.tar.bz2"

BUGS_TO="philantrop@exherbo.org"
#REMOTE_IDS="sourceforge:kvm"

#UPSTREAM_CHANGELOG="http://downloads.sourceforge.net/project/kvm/${PN}/${PV}/changelog"
#UPSTREAM_DOCUMENTATION="${HOMEPAGE}page/Documents [[ lang = en ]]"

LICENCES="GPL-2"
SLOT="0"

MYOPTIONS="
    alsa
    async [[ description = [ Enable asynchronous I/O using the kernels native interface ] ]]
    bluetooth
    caps [[ description = [ Use libcap-ng to reduce qemu process privileges ] ]]
    debug [[ description = [ Enable common debugging features ] ]]
    gnutls [[ description = [ Enable TLS encryption for VNC server ] ]]
    jpeg [[ description = [ Enable JPEG lossy compression for VNC server ] ]]
    png [[ description = [ Enable PNG compression for VNC server ] ]]
    pulseaudio
    sasl [[ description = [ Enables SASL authentication for VNC server ] ]]
    sdl [[ description = [ Enables the GUI part of kvm ] ]]
    smartcard [[ description = [ Enables smartcard support ] ]]
    spice [[ description = [ Enable the SPICE protocol, a remote-display system ] ]]
    usbredir [[ description = [ Enable USB redirection support ] ]]
    vde [[ description = [ Enable support for VDE-based networking ] ]]
    virtfs [[ description = [ Enable support for Plan 9 folder sharing over Virtio ]
              requires = [ caps xattr ] ]]
    xattr

    (
        amd64 [[ description = [ build the amd64 (x86_64) target ] ]]
        arm [[ description = [ build the arm target ] ]]
        ppc64 [[ description = [ build the ppc64 (powerpc64) target ] ]]
        x86 [[ description = [ build the x86 target ] ]]
    ) [[ number-selected = at-least-one ]]
"
#    rados [[ description = [ Support storage on rados block devices (rbd) ] ]]

DEPENDENCIES="
    build:
        app-text/texi2html
        virtual/pkg-config
        spice? ( virtualization-lib/spice-protocol[>=0.7.0] )
    build+run:
        net-misc/curl[>=7.19.6]
        sys-apps/util-linux[>=2.16.1]
        sys-libs/libseccomp
        alsa? ( sys-sound/alsa-lib[>=1.0.13] )
        async? ( dev-libs/libaio[>=0.3.107] )
        bluetooth? ( net-wireless/bluez[>=4.9] )
        caps? ( sys-libs/libcap-ng )
        gnutls? ( dev-libs/gnutls )
        jpeg? ( media-libs/jpeg )
        png? ( media-libs/libpng )
        pulseaudio? ( media-sound/pulseaudio )
        sasl? ( net-libs/cyrus-sasl[>=2.1.22] )
        sdl? ( media-libs/SDL[X][>=1.2.11] )
        smartcard? (
            dev-libs/libcacard
            dev-libs/nss[>=3.13.3]
        )
        spice? ( virtualization-lib/spice[>=0.8.2-r2] )
        usbredir? ( dev-libs/usbredir[>=0.4.2] )
        vde? ( net/vde[>=2.2.2] )
        xattr? ( sys-apps/attr )
        !app-emulation/qemu [[
            description = [ It doesn't make sense to install both anymore. ]
            resolution = [ uninstall-blocked-after ]
        ]]
        !app-virtualization/qemu-kvm [[
            description = [ It doesn't make sense to install both anymore. ]
            resolution = [ uninstall-blocked-after ]
        ]]
        group/kvm
"
#        rados? ( dev-libs/rados )

# The tests are a waste of time and resources. From the "getting started" part of the test description:
#    * Currently supported OS platforms are: Debian/Ubuntu, Red Hat/Fedora (if packages are needed)
#    * It is recommended to have at least 50GB of free disk space prior to installation (to test all guests).
#    * Make sure you have python 2.4 (or higher) installed.
#    * Do this all as root (or at least run the tests as root)
# Lots of configuration stuff would be needed as well.
RESTRICT="test"
# If anyone cares enough: http://www.linux-kvm.org/page/KVM-Autotest

DEFAULT_SRC_COMPILE_PARAMS=( V=1 )

qemu_src_prepare() {
    # Don't install the docs directly. We do that in src_install.
    edo sed -i -e '/$(DESTDIR)$(docdir)/d' Makefile

    default
}

qemu_src_configure() {
    local my_targets=

    local myconfig=(
        --prefix=/usr
        --sysconfdir=/etc
        --enable-curl
        --enable-curses
        --enable-guest-agent
        --enable-guest-base
        --enable-kvm
        --enable-linux-user
        --enable-mixemu
        --enable-nptl
        --enable-system
        --enable-user
        --enable-uuid
        --enable-vhost-net
        --disable-brlapi
        --disable-fdt
        --disable-sparse
        --disable-strip
        --disable-werror
        --disable-xen
        --disable-xfsctl # needs xfs/xfs.h, which isn't installed by xfsprogs atm

        $(option_enable virtfs)
    )

    if ! ever at_least 1.2.0; then
        myconfig+=(
            --enable-kvm-device-assignment
            --enable-vnc-thread
        )
    fi

    if ever at_least 1.2.0; then
        myconfig+=(
            --enable-seccomp
            --disable-xen-pci-passthrough
        )
    fi

    # audio drivers
    local myaudiodrv="--audio-drv-list="
    option alsa && myaudiodrv+="alsa "
    option pulseaudio && myaudiodrv+="pa "
    option sdl && myaudiodrv+="sdl "

    # features
    option async && myconfig+=( --enable-linux-aio )
    option bluetooth || myconfig+=( --disable-bluez )
    option caps && myconfig+=( --enable-cap-ng )
    option debug && myconfig+=( --enable-debug )
    option jpeg && myconfig+=( --enable-vnc-jpeg )
    option gnutls || myconfig+=( --disable-vnc-tls )
    option png && myconfig+=( --enable-vnc-png )
#    option rados && myconfig+=( --enable-rbd )
    option sasl || myconfig+=( --disable-vnc-sasl )
    option sdl || myconfig+=( --disable-sdl )
    option smartcard && myconfig+=( --enable-smartcard --enable-smartcard-nss )
    option spice && myconfig+=( --enable-spice )
    option usbredir && myconfig+=( --enable-usb-redir )
    option vde || myconfig+=( --disable-vde )
    option xattr && myconfig+=( --enable-attr )

    # targets
    option arm && my_targets+=",arm-linux-user,armeb-linux-user,arm-softmmu"
    option amd64 && my_targets+=",x86_64-linux-user,x86_64-softmmu"
    option ppc64 && my_targets+=",ppc64-linux-user,ppc64abi32-linux-user,ppc64-softmmu"
    option x86 && my_targets+=",i386-linux-user,i386-softmmu"

    edo ./configure \
        "${myconfig[@]}" \
        "${myaudiodrv}" \
        --target-list=${my_targets:1} \
        --audio-card-list="ac97 es1370 sb16 cs4231a adlib gus hda"
}

qemu_src_install() {
    default

    insinto /etc/qemu/
    insopts -m0755
    doins "${FILES}"/qemu-if{down,up}
    option sasl && doins qemu.sasl

    newdoc pc-bios/README README.pc-bios
    dodoc qemu-{doc,tech}.html
    dodoc pci-ids.txt
    dodoc -r QMP

    dosym /usr/bin/qemu-system-x86_64 /usr/bin/qemu

    exeinto /usr/bin/
    doexe scripts/kvm/*

    insinto "${UDEVRULESDIR}"
    hereins 65-kvm.rules <<EOF
KERNEL=="kvm", GROUP="kvm", MODE="0660"
EOF
}

qemu_pkg_postinst() {
    local cruft=( /etc/udev/rules.d/65-kvm.rules )
    for file in ${cruft[@]}; do
        if test -f "${file}" ; then
            nonfatal edo rm "${file}" || eerror "removing ${file} failed"
        fi
    done

    elog "Make sure your user is in the 'kvm' group"
    elog
    elog "You will need the Universal TUN/TAP driver compiled into your"
    elog "kernel or loaded as a module to use the virtual network device"
    elog "if using -net tap. You will also need support for 802.1d"
    elog "Ethernet Bridging and a configured bridge if using the provided"
    elog "qemu-ifup script from /etc/qemu."
}

