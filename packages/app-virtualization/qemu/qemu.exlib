# Copyright 2009-2013 Wulf C. Krueger <philantrop@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

require udev-rules

export_exlib_phases src_prepare src_configure src_install pkg_postinst

SUMMARY="Generic F/OSS machine emulator and virtualizer"
DESCRIPTION="
QEMU emulates CPUs through dynamic binary translation and provides a set of device
models to run a variety of unmodified guest operating systems. QEMU can also be
used purely for CPU emulation for user level processes, allowing applications
compiled for one architecture to be run on another.
QEMU now includes full support for KVM (Kernel-based Virtual Machine) which is a
full virtualization solution for Linux on x86 hardware containing virtualization
extensions (Intel VT or AMD-V).
The kernel component of KVM is included in mainline Linux, as of 2.6.20.
"
HOMEPAGE="http://${PN}.org/"
DOWNLOADS="http://wiki.${PN}-project.org/download/${PNV}.tar.bz2"

BUGS_TO="philantrop@exherbo.org"
REMOTE_IDS="freecode:qemu"

LICENCES="GPL-2"
SLOT="0"

MYOPTIONS="
    alsa
    async [[ description = [ Enable asynchronous I/O using the kernels native interface ] ]]
    bluetooth
    caps [[ description = [ Use libcap-ng to reduce qemu process privileges ] ]]
    debug [[ description = [ Enable common debugging features ] ]]
    gnutls [[ description = [ Enable TLS encryption for VNC server ] ]]
    iscsi [[ description = [ Enable iSCSI support ] ]]
    jpeg [[ description = [ Enable JPEG lossy compression for VNC server ] ]]
    png [[ description = [ Enable PNG compression for VNC server ] ]]
    pulseaudio
    rbd [[ description = [ Support storage on rados block devices (rbd; ceph) ] ]]
    sasl [[ description = [ Enables SASL authentication for VNC server ] ]]
    sdl [[ description = [ Enables the GUI part of kvm ] ]]
    smartcard [[ description = [ Enables smartcard support ] ]]
    spice [[ description = [ Enable the SPICE protocol, a remote-display system ] ]]
    usbredir [[ description = [ Enable USB redirection support ] ]]
    vde [[ description = [ Enable support for VDE-based networking ] ]]
    virtfs [[ description = [ Enable support for Plan 9 folder sharing over Virtio ]
              requires = [ caps xattr ] ]]
    xattr
    (
        amd64 [[ description = [ build the amd64 (x86_64) target ] ]]
        arm [[ description = [ build the arm target ] ]]
        ppc64 [[ description = [ build the ppc64 (powerpc64) target ] ]]
        x86 [[ description = [ build the x86 target ] ]]
    ) [[ number-selected = at-least-one ]]
"

DEPENDENCIES="
    build:
        app-text/texi2html
        virtual/pkg-config
        spice? ( virtualization-lib/spice-protocol[>=0.7.0] )
    build+run:
        net-misc/curl[>=7.19.6]
        sys-apps/util-linux[>=2.16.1]
        sys-libs/libseccomp
        x11-libs/pixman
        alsa? ( sys-sound/alsa-lib[>=1.0.13] )
        async? ( dev-libs/libaio[>=0.3.107] )
        bluetooth? ( net-wireless/bluez[>=4.9] )
        caps? ( sys-libs/libcap-ng )
        gnutls? ( dev-libs/gnutls )
        iscsi? ( dev-libs/libiscsi )
        jpeg? ( media-libs/jpeg )
        png? ( media-libs/libpng )
        pulseaudio? ( media-sound/pulseaudio )
        rbd? ( sys-cluster/ceph )
        sasl? ( net-libs/cyrus-sasl[>=2.1.22] )
        sdl? ( media-libs/SDL[X][>=1.2.11] )
        smartcard? (
            dev-libs/libcacard
            dev-libs/nss[>=3.13.3]
        )
        spice? ( virtualization-lib/spice[>=0.8.2-r2] )
        usbredir? ( dev-libs/usbredir[>=0.6] )
        vde? ( net/vde[>=2.2.2] )
        xattr? ( sys-apps/attr )
        !app-emulation/qemu [[
            description = [ Same package, different category ]
            resolution = [ uninstall-blocked-after ]
        ]]
        !app-virtualization/qemu-kvm [[
            description = [ qemu-kvm and qemu finally completely merged again. ]
            resolution = [ uninstall-blocked-after ]
        ]]
        group/kvm
"
#        rados? ( dev-libs/rados )

# The tests are a waste of time and resources. From the "getting started" part of the test description:
#    * Currently supported OS platforms are: Debian/Ubuntu, Red Hat/Fedora (if packages are needed)
#    * It is recommended to have at least 50GB of free disk space prior to installation (to test all guests).
#    * Make sure you have python 2.4 (or higher) installed.
#    * Do this all as root (or at least run the tests as root)
# Lots of configuration stuff would be needed as well.
RESTRICT="test"
# If anyone cares enough:
# http://www.linux-kvm.org/page/KVM-Autotest and
# http://wiki.qemu.org/Testing

DEFAULT_SRC_COMPILE_PARAMS=( V=1 )

qemu_src_prepare() {
    # Don't install the docs directly. We do that in src_install.
    edo sed -i -e '/$(DESTDIR)$(docdir)/d' Makefile

    default
}

qemu_src_configure() {
    local my_targets=

    local myconfig=(
        --prefix=/usr
        --sysconfdir=/etc
        --enable-curl
        --enable-curses
        --enable-guest-agent
        --enable-guest-base
        --enable-kvm
        --enable-linux-user
        --enable-mixemu
        --enable-nptl
        --enable-seccomp
        --enable-system
        --enable-tcg-interpreter
        --enable-user
        --enable-uuid
        --enable-vhost-net
        --disable-brlapi
        --disable-fdt
        --disable-glusterfs
        --disable-sparse
        --disable-strip
        --disable-werror
        --disable-xen
        --disable-xen-pci-passthrough
        --disable-xfsctl # needs xfs/xfs.h, which isn't installed by xfsprogs atm
        --with-system-pixman # required for softmmu
        $(option_enable async linux-aio)
        $(option_enable bluetooth bluez)
        $(option_enable caps cap-ng)
        $(option_enable gnutls vnc-tls)
        $(option_enable iscsi libiscsi)
        $(option_enable jpeg vnc-jpeg)
        $(option_enable png vnc-png)
        $(option_enable rbd)
        $(option_enable sasl vnc-sasl)
        $(option_enable sdl)
        $(option_enable smartcard)
        $(option_enable smartcard smartcard-nss)
        $(option_enable spice)
        $(option_enable usbredir usb-redir)
        $(option_enable vde)
        $(option_enable virtfs)
        $(option_enable xattr attr)
    )

    # audio drivers
    local myaudiodrv="--audio-drv-list="
    option alsa && myaudiodrv+="alsa "
    option pulseaudio && myaudiodrv+="pa "
    option sdl && myaudiodrv+="sdl "

    # features
    option debug && myconfig+=( --enable-debug )

    # targets
    option arm && my_targets+=",arm-linux-user,armeb-linux-user,arm-softmmu"
    option amd64 && my_targets+=",x86_64-linux-user,x86_64-softmmu"
    option ppc64 && my_targets+=",ppc64-linux-user,ppc64abi32-linux-user,ppc64-softmmu"
    option x86 && my_targets+=",i386-linux-user,i386-softmmu"

    edo ./configure \
        "${myconfig[@]}" \
        "${myaudiodrv}" \
        --target-list=${my_targets:1} \
        --audio-card-list="ac97 es1370 sb16 cs4231a adlib gus hda"
}

qemu_src_install() {
    default

    insinto /etc/qemu/
    insopts -m0755
    doins "${FILES}"/qemu-if{down,up}
    option sasl && doins qemu.sasl

    newdoc pc-bios/README README.pc-bios
    dodoc qemu-{doc,tech}.html
    dodoc pci-ids.txt
    dodoc -r QMP

    arch=${CHOST%%-*}
    case ${arch} in
      i486|i586|i686|x86) arch=i386 ;;
      amd64) arch=x86_64 ;;
    esac
    dosym /usr/bin/qemu-system-${arch} /usr/bin/qemu
    dosym /usr/bin/qemu-system-${arch} /usr/bin/qemu-kvm

    exeinto /usr/bin/
    doexe scripts/kvm/*

    insinto "${UDEVRULESDIR}"
    hereins 65-kvm.rules <<EOF
KERNEL=="kvm", GROUP="kvm", MODE="0660"
EOF
}

qemu_pkg_postinst() {
    local cruft=( /etc/udev/rules.d/65-kvm.rules )
    for file in ${cruft[@]}; do
        if test -f "${file}" ; then
            nonfatal edo rm "${file}" || eerror "removing ${file} failed"
        fi
    done

    elog "Make sure your user is in the 'kvm' group"
    elog
    elog "You will need the Universal TUN/TAP driver compiled into your"
    elog "kernel or loaded as a module to use the virtual network device"
    elog "if using -net tap. You will also need support for 802.1d"
    elog "Ethernet Bridging and a configured bridge if using the provided"
    elog "qemu-ifup script from /etc/qemu."
}

